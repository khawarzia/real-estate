# Generated by Django 2.2 on 2020-09-11 11:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='properties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(blank=True, max_length=100)),
                ('area', models.CharField(blank=True, max_length=100)),
                ('address', models.CharField(blank=True, max_length=200)),
                ('price', models.IntegerField(default=0)),
                ('sqft', models.FloatField(default=0)),
                ('beds', models.IntegerField(default=0)),
                ('baths', models.IntegerField(default=0)),
                ('family_type', models.CharField(blank=True, max_length=100)),
                ('year_built', models.IntegerField(default=2020)),
                ('heating', models.CharField(blank=True, max_length=100)),
                ('cooling', models.CharField(blank=True, max_length=100)),
                ('parking', models.IntegerField(default=0)),
                ('lot', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, max_length=2000)),
                ('image1', models.ImageField(blank=True, upload_to='')),
                ('image2', models.ImageField(blank=True, upload_to='')),
                ('image3', models.ImageField(blank=True, upload_to='')),
                ('image4', models.ImageField(blank=True, upload_to='')),
                ('image5', models.ImageField(blank=True, upload_to='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='tourrequests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('sel_date', models.CharField(blank=True, max_length=200)),
                ('sel_time', models.CharField(blank=True, max_length=200)),
                ('date1', models.CharField(blank=True, max_length=200)),
                ('time1_date1', models.CharField(blank=True, max_length=200)),
                ('time2_date1', models.CharField(blank=True, max_length=200)),
                ('time3_date1', models.CharField(blank=True, max_length=200)),
                ('date2', models.CharField(blank=True, max_length=200)),
                ('time1_date2', models.CharField(blank=True, max_length=200)),
                ('time2_date2', models.CharField(blank=True, max_length=200)),
                ('time3_date2', models.CharField(blank=True, max_length=200)),
                ('date3', models.CharField(blank=True, max_length=200)),
                ('time1_date3', models.CharField(blank=True, max_length=200)),
                ('time2_date3', models.CharField(blank=True, max_length=200)),
                ('time3_date3', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, choices=[('In Creation', 'In Creation'), ('Requested', 'Requested'), ('Scheduled', 'Scheduled'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed')], default='In Creation', max_length=20)),
                ('note', models.TextField(blank=True, max_length=1000)),
                ('linked_with', models.ForeignKey(null=True, on_delete=None, related_name='linked_withtr', to=settings.AUTH_USER_MODEL)),
                ('relproperty', models.ManyToManyField(blank=True, related_name='relpropertytr', to='functionality.properties')),
                ('shared_with', models.ForeignKey(null=True, on_delete=None, related_name='shared_withtr', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='usertr', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='tnotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, max_length=2000)),
                ('relproperty', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='trelproperty', to='functionality.properties')),
                ('reltour', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='treltour', to='functionality.tourrequests')),
            ],
        ),
        migrations.CreateModel(
            name='shortlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('note', models.TextField(blank=True, max_length=2000)),
                ('linked_with', models.ForeignKey(null=True, on_delete=None, related_name='linked_with', to=settings.AUTH_USER_MODEL)),
                ('relproperties', models.ManyToManyField(blank=True, to='functionality.properties')),
                ('shared_with', models.ForeignKey(null=True, on_delete=None, related_name='shared_with', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='propertyrating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=3)),
                ('relproperty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='functionality.properties')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='offers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(default='Requested', max_length=50)),
                ('date', models.DateField(auto_now_add=True)),
                ('relproperty', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='functionality.properties')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, max_length=2000)),
                ('relproperty', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='relproperty', to='functionality.properties')),
                ('relshortlist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relshortlist', to='functionality.shortlist')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='agent_buyer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent', to=settings.AUTH_USER_MODEL)),
                ('buyers', models.ManyToManyField(blank=True, related_name='buyers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
